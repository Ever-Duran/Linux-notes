The ls command shows a list of archive information.

Most commands follow a similar syntax pattern:
command [optiones…] [arguments…]

e.g. as we enter the command ls without any options or argument, it returns by default a list of archives
contained in the same current directory.

**An argument is used to specify something about the command to run.

e.g. ls Documents
As a result, it shows a list of the archives included into the Documents directory.

Given the fact that Linux is opensource, some developers have added their own commands.
e.g. aptitude, which accepts moo as an argument.

sysadmin@localhost:~$ aptitude moo  
There are no Easter Eggs in this program.

**Options can be used to modify the behaviour of a command.
In the previous example, ls shows the list of archive information, but if we added -l it would show a long screen result and 
provide more info about the listed archives.

By default, the command ls prints the values alphabetically, by adding option -r it will print the results alphabetically sorted by in the opposite way.

More than one options can be used separately or combined. 
All these ones will have the same effect:
ls -l -r
ls -rl
ls -lr

WE just used the argument moo but it's possible to modify it by using the option -v (verbose)

sysadmin@localhost:~$ aptitude -vv moo
Didn't I already tell you that there are no Easter Eggs in this program?
sysadmin@localhost:~$ aptitude -vvv moo
Stop it!

Remember you can combine them as you want:
aptitude -v -v moo
aptitude -vv moo

**

To find out where you're at in the archive system, use the command pwd.
pwd command prints the working directory, your current location in the archive system.

cd Documents
Takes you to the Documents directory

cd / 
brings you back to the previous root directory


In the Linux terminal, absolute and relative routes (also called paths) refer to the way you specify the location of files or directories in the file system.

An absolute path specifies the full path from the root directory (/) to the target file or directory.


A relative path specifies the location of a file or directory relative to your current working directory.
(Does not start with a /)

sysadmin@localhost:~$ cd Documents                                                
sysadmin@localhost:~/Documents$ cd School/Art                                   
sysadmin@localhost:~/Documents/School/Art$ pwd                                  
/home/sysadmin/Documents/School/Art                                             
sysadmin@localhost:~/Documents/School/Art$ 

THE result of the command pwd shows the absolute path to the Art directory.
The command followed this route
cd School/Art

But it could also follow this one with the same results:
cd School
cd Art


File Navigation (Using cd & Paths)

cd ..	Move to parent directory
cd -	Switch to previous directory
cd ~	Go to home directory
cd /	Go to root directory

sysadmin@localhost:~/Documents/School$ cd ~
sysadmin@localhost:~$


ENG
************************************************************************************************************
Symbol   File Type             Description
d        directory             A file used to contain other files.
-        regular file          Includes readable files, images, binary files, and compressed files.
l        symbolic link         Points to another file.
s        socket                Allows communication between processes.
p        pipe                  Allows communication between processes.
b        block device file     Used for communication with storage devices.
c        character device file Used for communication with hardware.

SPA
**********************************************************************************************************
Símbolo   Tipo de archivo       Descripción
d         directorio            Un archivo usado para contener otros archivos.
-         archivo ordinario     Incluye archivos leíbles, imágenes, archivos binarios, y archivos comprimidos.
l         enlaces simbólicos    Apunta a otro archivo.
s         socket                Permite la comunicación entre procesos.
p         tubería (pipe)        Permite la comunicación entre procesos.
b         archivo bloque        Usado para comunicaciones con dispositivos de almacenamiento.
c    archivo carácter    Usado para comunicaciones con el equipo (hardware).



sysadmin@localhost:~$ ls -l /var/log/
total 844                                                                       
-rw-r--r-- 1 root   root  18047 Dec 20  2017 alternatives.log                   
drwxr-x--- 2 root   adm    4096 Dec 20  2017 apache2                            
drwxr-xr-x 1 root   root   4096 Dec 20  2017 apt                                
-rw-r----- 1 syslog adm    1346 Oct  2 22:17 auth.log                           
-rw-r--r-- 1 root   root  47816 Dec  7  2017 bootstrap.log                      
-rw-rw---- 1 root   utmp      0 Dec  7  2017 btmp                               
-rw-r----- 1 syslog adm     547 Oct  2 22:17 cron.log                           
-rw-r----- 1 root   adm   85083 Dec 20  2017 dmesg                              
-rw-r--r-- 1 root   root 325238 Dec 20  2017 dpkg.log                           
-rw-r--r-- 1 root   root  32064 Dec 20  2017 faillog                            
drwxr-xr-x 2 root   root   4096 Dec  7  2017 fsck                               
-rw-r----- 1 syslog adm     106 Oct  2 19:57 kern.log                           
-rw-rw-r-- 1 root   utmp 292584 Oct  2 19:57 lastlog                            
-rw-r----- 1 syslog adm   19573 Oct  2 22:57 syslog                             
drwxr-xr-x 2 root   root   4096 Apr 11  2014 upstart                            
-rw-rw-r-- 1 root   utmp    384 Oct  2 19:57 wtmp 


Tipo de archivo

-rw-r--r-- 1 root   root  18047 Dec 20  2017 alternatives.log       
            
drwxr-x--- 2 root   adm    4096 Dec 20  2017 apache2  


Permisos

drwxr-xr-x 2 root   root   4096 Apr 11  2014 upstart
Los permisos indican cómo determinados usuarios pueden acceder a un archivo. Siga leyendo para obtener más información sobre los permisos.

Número de enlaces directos

-rw-r----- 1 syslog adm    1346 Oct  2 22:17 auth.log
Este número indica cuántos enlaces directos apuntan a este archivo. Los enlaces directos están fuera del alcance de este módulo, pero están cubiertos en el curso NDG Linux Essentials.

Propietario del archivo

-rw-r----- 1 syslog adm     106 Oct  2 19:57 kern.log
El usuario syslog posee este archivo. Cada vez que se crea un archivo, la propiedad se asigna automáticamente al usuario que lo creó.

Grupo propietario del archivo

-rw-rw-r-- 1 root   utmp 292584 Oct  2 19:57 lastlog
Indica qué grupo posee este archivo.

Tamaño del archivo

-rw-r----- 1 syslog adm   19573 Oct  2 22:57 syslog


Sello horario o de tiempo

drwxr-xr-x 2 root   root   4096 Dec  7  2017 fsck
Indica la fecha y hora en que el contenido del archivo se modificó por última vez.

Nombre del archivo

-rw-r--r-- 1 root   root  47816 Dec  7  2017 bootstrap.log

El campo final contiene el nombre del archivo o directorio.



A tener en cuenta

En el caso de enlaces simbólicos, un archivo que apunta a otro archivo, el nombre del enlace se mostrará junto a una flecha y el nombre de la ruta del archivo original.

lrwxrwxrwx. 1 root root 22 Nov 6 2012 /etc/grub.conf -> ../boot/grub/grub.conf
Los enlaces simbólicos están fuera del alcance de este módulo, pero están cubiertos en el curso NDG Linux Essentials.

***
Sorting files:

-t sorts files according to timestamp

-s sorts files according to size

-r reverses the sorting method

*********************************************
su is used to switch to another user account in the current shell session. By default, it switches to the root user.

su -
su -l
su --login

#: indicates that you're logged in as root (a normal user would see $)
root@localhost:~# exit

To logout use exit
root@localhost:~# exit
logout
sysadmin@localhost:~$

sl
If the sl command is installed, it runs a "Steam Locomotive" animation in the terminal.

**
sudo (short for "superuser do") is a powerful command in Linux and Unix-like systems 
that allows a permitted user to run a command as another user — most commonly the root (superuser) — without fully switching to that user.

The sudo -u option in Linux is used to run a command as a different user, not just root.
sudo -u <username> <command>


- commands run with sudo are executed as root by default, unless you specify a different user using the -u option.

************************************

PERMISSIONS:
Let’s break down rw-r--r--:

rw-  r--  r--
│    │    │
│    │    └── others (everyone else)
│    └────── group
└─────────── owner (user)

| Symbol | Meaning       | Description                                            |
| :----- | :------------ | :----------------------------------------------------- |
| **r**  | read          | can view the contents of the file (e.g. `cat`, `less`) |
| **w**  | write         | can modify or delete the file                          |
| **x**  | execute       | can run the file as a program/script                   |
| **-**  | no permission | permission not granted                                 |


So for rw-r--r--:
Owner (user) → rw- → read and write
Group → r-- → read only
Others → r-- → read only

✅ Summary:

The file owner can read and modify the file.
Everyone else can only read it.
No one can execute it.



-r--rw-rwx. 1 sysadmin staff 999 Apr  10  2013 /home/sysadmin/test


How Linux decides which permissions to use
When someone tries to access a file, Linux checks permissions in this order:
User (owner) → If you are the file’s owner, Linux uses the user permissions.
Group → If you’re not the owner but belong to the file’s group, Linux uses the group permissions.
Others → If neither of the above, Linux uses the others permissions.

Once one condition matches, Linux stops checking the rest — permissions are not cumulative.

Applying that to your example
User owner: sysadmin
Permissions: r-- → read only
Group: staff
Permissions: rw- → read and write
Others:
Permissions: rwx → read, write, and execute

So:
The user sysadmin (even if also a member of the staff group)
🔸 only gets r-- — can read the file, but cannot write or execute it.

Members of the staff group (who aren’t the file owner)
🔸 get rw- — can read and write.

Everyone else
🔸 gets rwx — full access.


***
Changing permissions:

chmod - change access mode

In Linux, there are two main methods to change file and directory permissions:

1. Symbolic method
This method uses letters to represent users and permissions.

2. Numeric (octal) method
This method uses numbers to represent permission sets.

*********************************************

sysadmin@localhost:~/Documents$ chmod u+x hello.sh


**
The command chown is used to change the file owner.

sudo chown root hello.sh

ls -l hello.sh


**

cat - concatenate

type the command and the file you want to see. It's recommended to use it with small files which don't require
screen scrolling.

sysadmin@localhost:~/Documents$ cat animals.txt                            
1 retriever                                                             
2 badger                                                                
3 bat                                                                  
4 wolf                                                                  
5 eagle

A method to see longer files:
The head and tail commands in Linux are used to display the beginning and end of text files, respectively. 
They’re very handy for quickly inspecting files or command outputs.

Here’s a breakdown:
1. head command
Purpose: Displays the first part (default: 10 lines) of a file or output.

2. tail command
Purpose: Displays the last part (default: 10 lines) of a file or output.

You can also use more and less to view file contents in Linux, and they’re especially useful 
for paging through long files (unlike head and tail, which only show fixed portions).

3. -n command it's used with head and tail to specify how many lines to show.

e.g. head -n 3 alpha.txt

***

The mv command in Linux is used to move or rename files and directories. It’s one of the most commonly used file management commands.

sysadmin@localhost:~/Documents$ cp /etc/passwd .
(. means “the current directory.”)

**

The dd command in Linux is a powerful low-level data copying and conversion tool. 
It can read, write, and convert raw data between files, devices, or partitions — often used for tasks like creating bootable USBs, 
backing up disks, or wiping data.

sysadmin@localhost:~$ dd if=/dev/zero of=/tmp/swapex bs=1M count=50 
50+0 records in
50+0 records out
52428800 bytes (52 MB) copied, 0.825745 s, 635 MB/s


dd if=<input_file> of=<output_file> [options]
if= → input file (source)
of= → output file (destination)

1. sudo dd if=/dev/sda of=/dev/sdb bs=4M status=progress
Copies everything from disk /dev/sda to /dev/sdb using a block size of 4 MB and showing progress.

2. Create a disk image
sudo dd if=/dev/sda of=/home/user/disk_backup.img bs=4M status=progress

Makes a full image of the /dev/sda drive.

3. Write an image to a USB drive
sudo dd if=ubuntu.iso of=/dev/sdb bs=4M status=progress oflag=sync

Writes a bootable ISO file to a USB stick (/dev/sdb).

4. Wipe a disk (dangerous!)
sudo dd if=/dev/zero of=/dev/sdb bs=1M status=progress

Overwrites the entire disk with zeros — completely erasing all data.
Be extremely careful with of= — one typo can destroy your system.

5. Create a file of a specific size
dd if=/dev/zero of=sample.bin bs=1M count=100

Creates a 100 MB file filled with zeros.


| Option            | Meaning                                                |
| ----------------- | ------------------------------------------------------ |
| `bs=`             | Block size (e.g., `bs=1M` = read/write 1 MB at a time) |
| `count=`          | Number of blocks to copy                               |
| `skip=`           | Skip blocks from input before copying                  |
| `seek=`           | Skip blocks on output before writing                   |
| `status=progress` | Show ongoing progress                                  |
| `conv=`           | Convert data (e.g., `conv=noerror,sync`)               |


For example, when you clone a full disk you don't have to specify the size or count.

dd if=/dev/sda of=/dev/sdb

****
The mv command in Linux is used to move or rename files and directories. It’s one of the most commonly used file management commands.

sysadmin@localhost:~$ cd ~/Documents

sysadmin@localhost:~/Documents$ mv people.csv Work

sysadmin@localhost:~/Documents$ ls Work                                         
people.csv
(The file will keep its name if you don't specify a new name)

mv can be used for a lot of files as long as the last argument is the destination:

sysadmin@localhost:~/Documents$ mv numbers.txt letters.txt alpha.txt School        
sysadmin@localhost:~/Documents$ ls School                                       
Art  Engineering  Math  alpha.txt  letters.txt  numbers.txt 

*moving a file to the same directory is another way of changing its name:

mv animals.txt zoo.txt













